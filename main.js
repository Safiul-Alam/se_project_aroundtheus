!function(){"use strict";class t{constructor(t,e,s,i,r){this.isLiked=t.isLiked,this._name=t.name,this._link=t.link,this._id=t._id,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=r}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_handleLikeButton(){this._likeButton.classList.toggle("card__like_button_active")}_handleDeleteCard(){this._cardElement.remove()}renderLikeIcon(){this.isLiked?this._likeButton.classList.add("card__like_button_active"):this._likeButton.classList.remove("card__like_button_active")}setIsLiked(t){this.isLiked=t,this.renderLikeIcon()}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete_button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}remove(){this._cardElement.remove()}getView(){this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like_button");const t=this._cardElement.querySelector(".card__image");return t.src=this._link,t.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this.renderLikeIcon(),this._setEventListeners(),this._cardElement}}var e=class{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=e,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}};const s=document.forms["card-add-form"],i=document.forms["profile-edit-form"],r=(document.querySelector(".cards__list"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"});class n{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.toggle("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(t=>{t.target===t.currentTarget&&this.close()}))}}class o extends n{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=[...this._popupForm.querySelectorAll(".modal__input")],this._handleFormSubmit=e,this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._formValues={},this._inputList.forEach((t=>{this._formValues[t.name]=t.value})),this._formValues}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}resetButtonText(){this._submitButton.textContent=this._submitButtonText}closeAfterSubmit(){this._popupForm.reset(),this.close()}handleLoad(t,e){this._submitButton.textContent=t?e:this._submitButtonText}setEventListeners(){this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const a=new class{constructor(t){let{baseUrl:e,headers:s}=t;this._baseUrl=e,this._headers=s}_request(t,e){let{method:s,body:i}=e;return fetch(`${this._baseUrl}${t}`,{headers:this._headers,method:s,body:i}).then((t=>this._checkResponse(t)))}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}getInitialCards(){return this._request("/cards",{})}getUserInfo(){return this._request("/users/me",{})}setUserInfo(t){let{modalTitle:e,description:s}=t;return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:e,about:s})})}setUserAvatar(t){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:t})})}uploadCard(t){let{name:e,link:s}=t;return this._request("/cards",{method:"POST",body:JSON.stringify({name:e,link:s})})}deleteCard(t){return this._request(`/cards/${t}`,{method:"DELETE"})}updateCardLike(t,e){return this._request(`/cards/${t}/likes`,{method:e})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"13ca465c-2480-4978-b0a0-252ae6127405","Content-Type":"application/json"}}),l=new class{constructor(t){let{userName:e,userJob:s,avatarSelector:i}=t;this.userName=document.querySelector(e),this.userJob=document.querySelector(s),this.avatar=document.querySelector(i)}getUserInfo(){return this._userInfo={modalTitle:this.userName.textContent,description:this.userJob.textContent},this._userInfo}setUserInfo(t){let{modalTitle:e,description:s}=t;this.userName.textContent=e,this.userJob.textContent=s}setAvatarImage(t){this.avatar.src=t}}({userName:".profile__title",userJob:".profile__description",avatarSelector:".profile__image"});function c(e){return new t(e,"#card-template",m,u,d).getView()}function u(t){L.open(),L.setSubmit((()=>{a.deleteCard(t._id).then((()=>{t.remove(),L.close()})).catch((t=>alert(`Error: ${t}`)))}))}function d(t){const e=t.isLiked?"DELETE":"PUT";a.updateCardLike(t._id,e).then((e=>{t.setIsLiked(e.isLiked)})).catch((t=>alert(`Error: ${t}`)))}a.getUserInfo().then((t=>{l.setUserInfo({modalTitle:t.name,description:t.about}),l.setAvatarImage(t.avatar)})).catch((t=>alert(t)));const h=new class{constructor(t){let{renderer:e,selector:s}=t;this._renderer=e,this._element=document.querySelector(s)}renderItems(t){t.forEach((t=>this._renderer(t)))}addItem(t){this._element.prepend(t)}}({renderer:t=>{const e=c(t);h.addItem(e)},selector:".cards__list"});a.getInitialCards().then((t=>{h.renderItems(t)})).catch((t=>alert(t)));const _=new class extends n{constructor(t){super({popupSelector:t}),this._imageEl=this._popupElement.querySelector(".modal__image"),this._titleEl=this._popupElement.querySelector(".modal__caption")}open(t){this._imageEl.src=t.link,this._imageEl.alt=t.name,this._titleEl.textContent=t.name,super.open()}}("#image-preview-modal");function m(t){_.open(t)}_.setEventListeners();const p=new e(r,s);p.enableValidation();const E=new o("#card-add-modal",(function(t){let{title:e,url:i}=t;E.handleLoad(!0,"Saving...");const r={name:e,link:i};a.uploadCard(r).then((t=>{const e=c(t);h.addItem(e),E.close(),p.disableButton(),s.reset()})).catch((t=>{console.error("Error adding card:",t)})).finally((()=>{E.handleLoad(!1)}))}));E.setEventListeners(),document.querySelector(".profile__add-button").addEventListener("click",(()=>{E.open()}));const v=new e(r,i);v.enableValidation();const b=new o("#profile-edit-modal",(function(t){b.handleLoad(!0,"Saving..."),a.setUserInfo(t).then((()=>{l.setUserInfo(t),b.close(),i.reset()})).catch((t=>{console.error("Error updating profile:",t)})).finally((()=>{b.handleLoad(!1)}))}));b.setEventListeners(),document.querySelector(".profile__edit-button").addEventListener("click",(()=>{const t=l.getUserInfo();b.setInputValues(t),v.resetValidation(),b.open()}));const L=new class extends n{constructor(t,e){super({popupSelector:t}),this._submitButton=this._popupElement.querySelector(".modal__button"),this._onConfirm=e,this._submitButtonText=this._submitButton.textContent}setSubmit(t){this._handleSubmitCallback=t}setEventListeners(){super.setEventListeners(),this._submitButton.addEventListener("click",(t=>{t.preventDefault(),this._handleSubmitCallback()}))}}("#modal-confirm",(()=>{}));L.setEventListeners();const f=document.querySelector("#edit-avatar-form"),S=new e(r,f);S.enableValidation();const k=new o("#edit-avatar-modal",(function(t){k.handleLoad(!0,"Saving..."),a.setUserAvatar(t.avatar).then((()=>{l.setAvatarImage(t.avatar),k.close(),f.reset(),S.disableButton(),f.reset()})).catch((t=>{console.error(t)})).finally((()=>{k.handleLoad(!1)}))}));k.setEventListeners(),document.querySelector(".profile__edit-image").addEventListener("click",(function(){k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,